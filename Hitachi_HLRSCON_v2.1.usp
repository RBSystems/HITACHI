/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:apcube.com
System Name:
System Number:
Programmer:doobom
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
 #SYMBOL_NAME "Hitachi_HLRSCON_v2.1"
// #HINT ""
// #DEFINE_CONSTANT
#CATEGORY "22" // HVAC
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
 #HELP_PDF_FILE "Hitachi_HLRSCON_Protocol.pdf"
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
#ENCODING_ASCII
// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PARENT
// #ENCODING_INHERIT_FROM_PROGRAM
#HELP_BEGIN
   9600,8,1,n
#HELP_END

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
 DIGITAL_INPUT Power_On,Power_Off,_SKIP_;
 DIGITAL_INPUT Mode_Cool,Mode_Fan,Mode_Arefaction,Mode_Warm,_SKIP_;
 DIGITAL_INPUT Speed_High,Speed_Mid,Speed_Low,_SKIP_;
 DIGITAL_INPUT Temp_Up,Temp_Down,_SKIP_,CheckStatus,_SKIP_;
// ANALOG_INPUT 
 STRING_INPUT From_Device$[100];
// BUFFER_INPUT 

 DIGITAL_OUTPUT Power_On_Fb,Power_Off_Fb,_SKIP_;
 DIGITAL_OUTPUT Mode_Cool_Fb,Mode_Fan_Fb,Mode_Arefaction_Fb,Mode_Warm_Fb,_SKIP_;
 DIGITAL_OUTPUT Speed_High_Fb,Speed_Mid_Fb,Speed_Low_Fb,_SKIP_;
 ANALOG_OUTPUT Current_Temp,Current_Set_Temp,_SKIP_,_SKIP_,_SKIP_;
 STRING_OUTPUT To_Device$;

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
 INTEGER_PARAMETER _SKIP_,_SKIP_,_SKIP_,_SKIP_,_SKIP_,_SKIP_,_SKIP_,_SKIP_,_SKIP_,_SKIP_,_SKIP_,_SKIP_,_SKIP_,_SKIP_,_SKIP_,_SKIP_,Address;
// SIGNED_INTEGER_PARAMETER
// LONG_INTEGER_PARAMETER
// SIGNED_LONG_INTEGER_PARAMETER
// STRING_PARAMETER

/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/
#BEGIN_PARAMETER_PROPERTIES Address
    propValidUnits = unitDecimal|unitHex;// unitString or unitDecimal|unitHex|unitPercent|unitCharacter|unitTime|unitTicks;
    propDefaultUnit = unitHex;// unitString, unitDecimal, unitHex, unitPercent, unitCharacter, unitTime or unitTicks;
    propBounds = 0x00 , 0xFF;
    propDefaultValue = 0x11;  // or, propDefaultValue = "";
   // propList = // { "value" , "label" } , { "value" , "label" } , ... ;
    propShortDescription = "Outside Machine ID+Inside Machine ID";
   // #BEGIN_PROP_FULL_DESCRIPTION  line_1...  line_2...  line_n  #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
 INTEGER Premier1,Premier2,Header,CC,PCNT,ADH,ADL,ASH,ASL,OPCODE,Data[6],Data7,BCC;
 INTEGER i,temp;
// LONG_INTEGER
// SIGNED_INTEGER
// SIGNED_LONG_INTEGER
 STRING Temp$[30];

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
Function ChkSum()
{
	BCC=0;
	for(i=1 to len(Temp$))
		{
		BCC=BCC+Byte(Temp$,i);
		}
}
Function ToDevice()
{
	Makestring(Temp$,"%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s",
		chr(Premier1),chr(Premier2),chr(Header),chr(CC),chr(PCNT),
		chr(ADH),chr(ADL),chr(ASH),chr(ASL),chr(OPCODE),
		chr(Data[0]),chr(Data[1]),chr(Data[2]),chr(Data[3]),chr(Data[4]),chr(Data[5]),chr(Data[6]),chr(Data7));
	Call Chksum();
	Makestring(To_Device$,"%s%s\x0D\x0D",Temp$,chr(BCC));	
}

Function AutoCheck()
{
//	Delay(500);
//	While(1){
		OPCODE=0x3A;
//		SetArray(Data,0xFF);
//		Wait(6000,AutoCheckWait){
			Call ToDevice();
//			}
//		}
}
/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
PUSH Power_On
{
    OPCODE=0x00;
//	SetArray(Data,0xFF);
	Data[0]=0x10;
	Call ToDevice();
}
PUSH Power_Off
{
    OPCODE=0x00;
//	SetArray(Data,0xFF);
	Data[0]=0x00;
	Call ToDevice();
}
PUSH Mode_Cool
{
    OPCODE=0x00;
//	SetArray(Data,0xFF);
	Data[1]=0x00;
	Call ToDevice();
}
PUSH Mode_Fan
{
    OPCODE=0x00;
//	SetArray(Data,0xFF);
	Data[1]=0x01;
	Call ToDevice();
}
PUSH Mode_Arefaction
{
    OPCODE=0x00;
//	SetArray(Data,0xFF);
	Data[1]=0x02;
	Call ToDevice();
}
PUSH Mode_Warm
{
    OPCODE=0x00;
//	SetArray(Data,0xFF);
	Data[1]=0x03;
	Call ToDevice();
}
PUSH Speed_High
{
    OPCODE=0x00;
//	SetArray(Data,0xFF);
	Data[2]=0x03;
	Call ToDevice();
}
PUSH Speed_Mid
{
    OPCODE=0x00;
//	SetArray(Data,0xFF);
	Data[2]=0x02;
	Call ToDevice();
}
PUSH Speed_Low
{
    OPCODE=0x00;
//	SetArray(Data,0xFF);
	Data[2]=0x01;
	Call ToDevice();
}
PUSH Temp_Up
{
    OPCODE=0x00;
//	SetArray(Data,0xFF);
	do{
		if(temp<0x1E)
			{
			temp=temp+1;
			Data[5]=temp;
			Call ToDevice();
			delay(50);
			}
		else if(temp=0x1E)Break;
		}
	until(Temp_Up=0);
}
PUSH Temp_Down
{
	Integer Temp_Low;

    OPCODE=0x00;
//	SetArray(Data,0xFF);

	if(Mode_Warm_Fb=1)
		{
			Temp_Low=0x11;
		}
	else
		{
			Temp_Low=0x13;
		}
	
	do{
		if(temp>Temp_Low)
			{
			temp=temp-1;
			Data[5]=temp;
			Call ToDevice();
			delay(50);
			}
		else if(temp=Temp_Low)Break;
		}
	until(Temp_Down=0);
}
/*
PUSH Power_On,Power_Off,Mode_Cool,Mode_Fan,Mode_Arefaction,Mode_Warm,Speed_High,Speed_Mid,Speed_Low,Temp_Up,Temp_Down
{
	CancelWait(AutoCheckWait);
}
RELEASE Power_On,Power_Off,Mode_Cool,Mode_Fan,Mode_Arefaction,Mode_Warm,Speed_High,Speed_Mid,Speed_Low,Temp_Up,Temp_Down
{
	CancelWait(AutoCheckWait);*/
/*
	OPCODE=0x3A;
	SetArray(Data,0x00);
	Wait(1000){
		Call ToDevice();
		}
*//*
}*/

PUSH CheckStatus
{
	Call AutoCheck();
}

CHANGE From_Device$
{
	Integer Power_Sta,Mode_Sta,Speed_Sta,Current_Temp_Sta,Current_Set_Temp_Sta;

	IF(
		Len(From_Device$)>10 
		&& Byte(From_Device$,1)=Premier1 
		&& Byte(From_Device$,2)=Premier2 
		&& Byte(From_Device$,3)=Header 
		&& Byte(From_Device$,9)=ADL
		)
		{
			Power_Sta=Byte(From_Device$,11);
			Mode_Sta=Byte(From_Device$,12);
			Speed_Sta=Byte(From_Device$,13);

			Data[0]=Power_Sta;
			Data[1]=Mode_Sta;
			Data[2]=Speed_Sta;

			Current_Temp_Sta=Byte(From_Device$,15);
			IF(Current_Temp_Sta>=0x00 && Current_Temp_Sta<=0x30)
				{
					Current_Temp=Current_Temp_Sta;
				}

			Current_Set_Temp_Sta=Byte(From_Device$,16);
			IF(Current_Set_Temp_Sta>=0x11 && Current_Set_Temp_Sta<=0x1E)
				{
					Current_Set_Temp=Current_Set_Temp_Sta;
					temp=Current_Set_Temp_Sta;
					Data[5]=Current_Set_Temp_Sta;
				}

			Switch(Power_Sta){
					Case(0x10):
						{
							Power_On_Fb=1;
							Power_Off_Fb=0;
						}
					Case(0x00):
						{
							Power_On_Fb=0;
							Power_Off_Fb=1;
						}
				}
			Switch(Mode_Sta){
					Case(0x00):
						{
							Mode_Cool_Fb=1;
							Mode_Fan_Fb=0;
							Mode_Arefaction_Fb=0;
							Mode_Warm_Fb=0;
						}
					Case(0x01):
						{
							Mode_Cool_Fb=0;
							Mode_Fan_Fb=1;
							Mode_Arefaction_Fb=0;
							Mode_Warm_Fb=0;
						}
					Case(0x02):
						{
							Mode_Cool_Fb=0;
							Mode_Fan_Fb=0;
							Mode_Arefaction_Fb=1;
							Mode_Warm_Fb=0;
						}
					Case(0x03):
						{
							Mode_Cool_Fb=0;
							Mode_Fan_Fb=0;
							Mode_Arefaction_Fb=0;
							Mode_Warm_Fb=1;
						}
				}
			Switch(Speed_Sta){
					Case(0x03):
						{
							Speed_High_Fb=1;
							Speed_Mid_Fb=0;
							Speed_Low_Fb=0;
						}
					Case(0x02):
						{
							Speed_High_Fb=0;
							Speed_Mid_Fb=1;
							Speed_Low_Fb=0;
						}
					Case(0x01):
						{
							Speed_High_Fb=0;
							Speed_Mid_Fb=0;
							Speed_Low_Fb=1;
						}
				}
		}
}


/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/
Function Main()
{
	Premier1=0xAA;
	Premier2=0x55;
	Header=0x30;
	CC=0x9C;
//	CC=0xBE;
	PCNT=0x00;
	ADH=0x11;
	ADL=Address;
	ASH=0x01;
	ASL=0x00;
	Data7=0x00;
	SetArray(Data,0xFF);


	temp=0x13;

	Power_On_Fb=0;
	Power_Off_Fb=0;

	Mode_Cool_Fb=0;
	Mode_Fan_Fb=0;
	Mode_Arefaction_Fb=0;
	Mode_Warm_Fb=0;

	Speed_High_Fb=0;
	Speed_Mid_Fb=0;
	Speed_Low_Fb=0;

	Current_Temp=0;
	Current_Set_Temp=0;

//	Call AutoCheck();
}
